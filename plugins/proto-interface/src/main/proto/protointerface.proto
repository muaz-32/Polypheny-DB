syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.polypheny.db.protointerface.proto";
option java_outer_classname = "ProtoInterfaceProto";
option objc_class_prefix = "PI";

package polypheny.protointerface;

// Functions provided by the proto interface
service ProtoInterface {
  rpc Connect(ConnectionRequest) returns (ConnectionReply) {}
  rpc executeSimpleSqlQuery(SimpleSqlQuery) returns (QueryResult) {}
}

// Supported query languages
enum QUERY_LANGUAGE {
  QUERY_LANGUAGE_UNSPECIFIED = 0;
  QUERY_LANGUAGE_SQL = 1;
}

message ConnectionRequest {
  int32 major_api_version = 1;
  int32 minor_api_version = 2;
  string client_uuid = 3;
  map<string, string> connection_properties = 4;
}

message ConnectionReply {
  bool is_compatible = 1;
  uint32 major_api_version = 2;
  uint32 minor_api_version = 3;
}

message Values {
  /* TODO: implementation of values to be inserted into statements
   * Idea: list of value wrapper according to polyvalue / new stuff from refactor branch
   */
}

message ValueBatch {
  repeated Values value_sets = 1;
}

message Statement {
  QUERY_LANGUAGE query_language = 1;
  string statement = 2;
}

message StatementBatch {
  repeated Statement statements = 1;
}

message DirectStatement {
  Statement statement = 1;
  Values values = 2;
}

message DirectStatementBatch {
  repeated DirectStatement direct_statements = 1;
  repeated Values values = 2;
}

message QueryResult {
  oneof result {
    bool noResult = 1;
    Frame frame = 2;
    int32 count = 3;
    int64 bigCount = 4;
  }
}

message Frame {

}

message setProperty {
  string key = 1;
  string value = 2;
}
