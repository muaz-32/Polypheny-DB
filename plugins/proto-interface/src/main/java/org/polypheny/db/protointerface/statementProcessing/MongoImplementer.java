/*
 * Copyright 2019-2023 The Polypheny Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.polypheny.db.protointerface.statementProcessing;

import org.polypheny.db.PolyImplementation;
import org.polypheny.db.algebra.AlgRoot;
import org.polypheny.db.catalog.Catalog;
import org.polypheny.db.languages.QueryLanguage;
import org.polypheny.db.languages.QueryParameters;
import org.polypheny.db.languages.mql.Mql.Family;
import org.polypheny.db.languages.mql.MqlNode;
import org.polypheny.db.languages.mql.MqlQueryParameters;
import org.polypheny.db.processing.AutomaticDdlProcessor;
import org.polypheny.db.protointerface.PIServiceException;
import org.polypheny.db.protointerface.statements.PIStatement;
import org.polypheny.db.transaction.Statement;

public class MongoImplementer extends StatementImplementer {

    private static QueryLanguage language = QueryLanguage.from( "mongo" );


    @Override
    public QueryLanguage getLanguage() {
        return language;
    }


    @Override
    public void implement( PIStatement piStatement ) throws PIServiceException {
        if ( hasInvalidLanguage( piStatement ) ) {
            throw new PIServiceException( "The statement in the language "
                    + piStatement.getLanguage()
                    + "can't be executed using a mql executor.",
                    "I9003",
                    9003
            );
        }
        Statement statement = piStatement.getStatement();
        if ( statement == null ) {
            throw new PIServiceException( "Statement is not linked to a polypheny statement",
                    "I9001",
                    9001
            );
        }
        String query = piStatement.getQuery();
        PolyImplementation implementation;
        AutomaticDdlProcessor mqlProcessor = (AutomaticDdlProcessor) statement.getTransaction().getProcessor( language );
        QueryParameters parameters = new MqlQueryParameters( query, Catalog.snapshot().getNamespace( piStatement.getNamespace().getName() ).orElseThrow().id, piStatement.getNamespace().getNamespaceType() );
        MqlNode parsed = (MqlNode) mqlProcessor.parse( query ).get( 0 );
        if ( parsed.getFamily() == Family.DML && mqlProcessor.needsDdlGeneration( parsed, parameters ) ) {
            mqlProcessor.autoGenerateDDL( statement, parsed, parameters );
        }
        if ( parsed.getFamily() == Family.DDL ) {
            implementation = mqlProcessor.prepareDdl( statement, parsed, parameters );
        } else {
            AlgRoot logicalRoot = mqlProcessor.translate( statement, parsed, parameters );
            implementation = statement.getQueryProcessor().prepareQuery( logicalRoot, true );
        }
        piStatement.setImplementation( implementation );
    }


}
